#!/usr/bin/env perl
$| = 1;
use strict;
use warnings;
use English;
my $fudge_factor = 10;
$SIG{TERM} = \&sig_term; # What to do when we get a terminate signal
$SIG{INT} = \&sig_term; # What to do when we get a CTRL-C
my $state_file = '/home/user/tmp/audio';
my $playlist_file = '/home/user/tmp/playlist';
#my $player_command = "mplayer -really-quiet";
my $player_command = "mplayer";
# Find out how far into the audio file we left off at last time
my ( $audio_file, $offset, @playlist ) = &read_playlist_file($playlist_file);
&start_audio_player( $audio_file, $offset, $player_command );
# print `clear`;
&write_player_status( $state_file );

# while ( defined fileno PLAYER ) {
$/ = "\r";
while (my $line = <PLAYER> ) {
    print "$line,<==\r", time - $BASETIME + $offset;
    &sig_term if ( time - $BASETIME ) > 600; # for napping
}
&sig_term;
print "What's up Doc? DEBUG\n";

# system("sudo /sbin/fastshutdown.sh");

################ Subroutines only below this line ################

sub read_playlist_file {
    my $playlist_file = shift;
    my @playlist;
    open(IN, "$playlist_file");
    while (<IN>) {
	chomp($_);
	push @playlist, $_;
    }
    close(IN);
    print @playlist;
    my ( $pid, $audio_file, $offset ) = split ( /\|/, $playlist[0] );
    return ( $audio_file, $offset, @playlist );
}

sub start_audio_player {
    my ( $audio_file, $offset, $player_command ) = @_;
#    system("killall --signal SIGTERM mplayer");
    print "$player_command -ss $offset $audio_file\n";
#    my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'some cmd and args');
    open(PLAYER, "$player_command -ss $offset $audio_file|");
#    print `clear`;
}

sub write_player_status {
    my ( $state_file, $action ) = @_;
    open ( OUT, ">$state_file");
    if ( $action eq 'exit' ) {
	print OUT "0\n";
    } else {
	print OUT $$, "\n"; # print out process id
    }
    close OUT;
}

sub write_playlist_file {
    my ( $playlist_file, @playlist )  = @_;
    open ( OUT, ">$playlist_file");
    print OUT "0|$audio_file|", time - $BASETIME + $offset - $fudge_factor, "\n";
    shift @playlist;
    foreach my $line ( @playlist ) {
	print OUT "$line\n";
    }
    close OUT;
}

sub sig_term {
    &write_playlist_file( $playlist_file, @playlist );
#    print PLAYER 'q';
    system("killall --signal SIGTERM mplayer");
    &write_player_status( $state_file, 'exit' );
    close PLAYER;
    "Somebody sent me a terminate signal (SIGTERM 15)";
    exit 0;
}
